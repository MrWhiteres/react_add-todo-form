{"version":3,"sources":["api/todos.ts","api/users.ts","api/index.ts","components/Form/Form.tsx","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","title","completed","userId","name","username","email","findUser","Users","find","user","Form","onAdd","useState","setTitle","hasTitleError","setHasTitleError","setUserId","hasUserIdError","setHasUserIdError","action","method","onSubmit","event","preventDefault","className","htmlFor","type","placeholder","value","onChange","target","required","disabled","map","UserInfo","href","TodoInfo","todo","classNames","TodoList","todos","initialTodos","todosFromServer","getNewTodoId","Math","max","App","setTodos","newTodo","currentTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.85327a8a.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { PreparedTodo, User } from '../types';\nimport todosFromServer from './todos';\nimport Users from './users';\n\nexport function findUser(userId:number):User {\n  return [...Users].find(user => user.id === userId) as User;\n}\n\nexport function getPreparedTodos():PreparedTodo[] {\n  return todosFromServer.map(todo => ({\n    ...todo,\n    user: findUser(todo.userId),\n  }));\n}\n","import React, { useState } from 'react';\nimport { findUser } from '../../api';\nimport Users from '../../api/users';\nimport { PreparedTodo } from '../../types';\n\ntype Props = {\n  onAdd:(todo:PreparedTodo) => void;\n};\n\nexport const Form:React.FC<Props> = ({ onAdd }) => {\n  const [title, setTitle] = useState('');\n  const [hasTitleError, setHasTitleError] = useState(false);\n\n  const [userId, setUserId] = useState(0);\n  const [hasUserIdError, setHasUserIdError] = useState(false);\n\n  const handleTitleChange = (event:React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setHasTitleError(false);\n  };\n\n  const handleUserIdChange = (event:React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setHasUserIdError(false);\n  };\n\n  const handleAdd = (event:React.FormEvent) => {\n    event.preventDefault();\n\n    setHasTitleError(!title);\n    setHasUserIdError(!userId);\n\n    if (!title || !userId) {\n      return;\n    }\n\n    const reset = () => {\n      setTitle('');\n      setHasTitleError(false);\n\n      setUserId(0);\n      setHasUserIdError(false);\n    };\n\n    onAdd({\n      id: 0,\n      title,\n      completed: false,\n      userId,\n      user: findUser(userId),\n    });\n    reset();\n  };\n\n  return (\n    <form\n      action=\"/api/todos\"\n      method=\"POST\"\n      onSubmit={handleAdd}\n    >\n      <div className=\"field\">\n        <label htmlFor=\"post-title\">\n          Title:&nbsp;\n\n          <input\n            id=\"post-title\"\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={handleTitleChange}\n          />\n\n        </label>\n        {hasTitleError && (\n          <span className=\"error\">Please enter a title</span>\n        )}\n\n      </div>\n\n      <div className=\"field\">\n        <label htmlFor=\"user-id\">\n          User:&nbsp;\n\n          <select\n            id=\"user-id\"\n            data-cy=\"userSelect\"\n            required\n            value={userId}\n            onChange={handleUserIdChange}\n          >\n            <option\n              value=\"0\"\n              disabled\n            >\n              Choose a user\n            </option>\n            {Users.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n        {hasUserIdError && (\n          <span className=\"error\">Please choose a user</span>\n        )}\n      </div>\n\n      <button\n        type=\"submit\"\n        data-cy=\"submitButton\"\n      >\n        Add\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\nimport { User } from '../../types';\n\ntype Props = {\n  user:User\n};\n\nexport const UserInfo:React.FC<Props> = ({ user }) => {\n  return (\n    <a\n      className=\"UserInfo\"\n      href={`mailto:${user.email}`}\n    >\n      {user.name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { PreparedTodo } from '../../types';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo:PreparedTodo\n};\n\nexport const TodoInfo:React.FC<Props> = ({ todo }) => {\n  const { user } = todo;\n\n  return (\n    <article\n      data-id={todo.id}\n      className={classNames(\n        'TodoInfo',\n        { 'TodoInfo--completed': todo.completed },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n      <UserInfo user={user} />\n    </article>\n  );\n};\n","import React from 'react';\nimport { PreparedTodo } from '../../types';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos:PreparedTodo[]\n};\n\nexport const TodoList:React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo\n          todo={todo}\n          key={todo.id}\n        />\n      ))}\n    </section>\n  );\n};\n","import './App.scss';\nimport React, { useState } from 'react';\nimport { getPreparedTodos } from './api';\nimport { Form } from './components/Form';\nimport { TodoList } from './components/TodoList';\nimport { PreparedTodo } from './types';\n\nexport const initialTodos = getPreparedTodos();\n\nfunction getNewTodoId(todos:PreparedTodo[]) {\n  const maxId = Math.max(\n    ...todos.map(todo => todo.id),\n  );\n\n  return maxId + 1;\n}\n\nexport const App:React.FC = () => {\n  const [todos, setTodos] = useState<PreparedTodo[]>(initialTodos);\n\n  const addTodo = (todo:PreparedTodo) => {\n    const newTodo = {\n      ...todo,\n      id: getNewTodoId(todos),\n    };\n\n    setTodos(currentTodos => [...currentTodos, newTodo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <Form onAdd={addTodo} />\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}